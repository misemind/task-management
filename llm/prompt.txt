I am working on a NestJS project that follows a strict CQRS design pattern. I will provide you with the complete code for an existing entity to use as a pattern. You must generate the complete code for a new entity named [EntityName], based on the example code I provide.

The generated code must follow the exact structure, format, and style as the provided example, and include every necessary component:

- Handlers: For Create, Update, and Delete operations.
- Commands: To encapsulate the data needed for handlers.
- Queries: To handle data retrieval.
- Service: To manage business logic and interact with commands and queries.
- Repository: For database interactions, ensuring adherence to the entity schema.
- DTOs: For data transfer objects, encapsulating input and output data.
- Entity Schema: The schema will be provided, and you must adhere to the provided schema.
- Controller: For REST API endpoints, handling incoming requests and responses. Swagger annotations are mandatory for every controller method to generate API documentation.
- Module Configuration: To tie everything together in the NestJS module system.
Testing Structure:
Unit Tests:

Handlers: Test the Create, Update, and Delete handlers for the entity.
Service: Unit tests for the business logic in the service layer.
Repository: Unit tests for the database interaction layer.
Integration Tests:

Verify the integration between handlers, service, and repository.
End-to-End (e2e) Tests:

Perform end-to-end tests for the controller, testing the entire flow from HTTP requests to the database interactions, including creating, updating, retrieving, and deleting an entity.
The output must be provided in a single block, with each file clearly indicated by its path, formatted like this:

```typescript
// apps/server/src/domains/issue/repositories/issue.repository.ts
filecontent
```

### Example Code for Existing Entity
```
<code_format>
```

### Entity Schema for:
``` 
  <schema>

```

### Your Task:

- Generate the Code: Produce the full set of files, including handlers, commands, queries, service, repository, DTOs, entity schema (for [EntityName]), controller (with Swagger annotations), and module.
- Ensure Consistency: The code should be a direct copy-paste version of the example, with only the necessary updates to reflect the new entity.
- Single Block Output: The entire code should be generated in a single block, formatted exactly like the example provided, with file paths and content.
- Swagger Annotations: Mandatory for all controller methods to generate documentation using `@nestjs/swagger`.
- Avoid Errors: Double-check that the generated code adheres to the CQRS pattern and contains no errors or omissions.

Output: The complete code must be in a single block, ensuring that the format, structure, and logic strictly match the provided example."

---

With this prompt, you can replace the placeholders for example code and entity schema with the actual code for your project.